{"version":3,"sources":["solver.js","index.js"],"names":["nums","Solver","board","this","nextEmpty","findEmpty","row","col","i","length","valid","solve","j","num","checkRow","checkCol","checkGrid","baseRow","Math","floor","baseCol","dummyCol","axios","require","SudukoBoard","puzzleGrid","className","map","cell","type","value","SudokuGame","useState","puzzle","setPuzzle","solveObject","onClick","get","then","response","data","catch","error","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df054231.chunk.js","sourcesContent":["const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nexport default class Solver {\n    constructor(board) {\n        this.board = board;\n    }\n    solve() {\n        let nextEmpty = this.findEmpty();\n        if (nextEmpty === false) {\n            return true;\n        }\n        let row = nextEmpty[0];\n        let col = nextEmpty[1];\n\n        for (var i = 0; i < nums.length; i++) {\n            if (this.valid(nums[i], row, col)) {\n                this.board[row][col] = nums[i];\n                if (this.solve()) {\n                    return true;\n                }\n            }\n            this.board[row][col] = 0;\n        }\n\n        return false;\n    }\n\n    findEmpty() {\n        for (var i = 0; i < 9; i++) {\n            for (var j = 0; j < 9; j++) {\n                if (this.board[i][j] === 0) {\n                    return [i, j];\n                }\n            }\n        }\n        return false;\n    }\n\n    valid(num, row, col) {\n        return (\n            this.checkRow(num, row) &&\n            this.checkCol(num, col) &&\n            this.checkGrid(num, row, col)\n        );\n    }\n\n    checkRow(num, row) {\n        for (var i = 0; i < 9; i++) {\n            if (this.board[row][i] === num) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    checkCol(num, col) {\n        for (var i = 0; i < 9; i++) {\n            if (this.board[i][col] === num) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    checkGrid(num, row, col) {\n        let baseRow = Math.floor(row / 3) * 3;\n        let baseCol = Math.floor(col / 3) * 3;\n\n        for (var i = 0; i < 3; i++) {\n            let dummyCol = baseCol + i;\n            for (var j = 0; j < 3; j++) {\n                if (this.board[baseRow + j][dummyCol] === num) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Solver from \"./solver.js\";\nimport \"./styles.css\";\nconst axios = require(\"axios\");\n\nconst testPuzzle = [\n    [0, 0, 0, 0, 0, 9, 7, 4, 1],\n    [0, 3, 0, 7, 0, 2, 0, 0, 8],\n    [0, 4, 0, 6, 0, 0, 5, 0, 0],\n    [0, 0, 0, 0, 0, 0, 2, 9, 0],\n    [9, 0, 0, 0, 0, 0, 0, 0, 4],\n    [0, 2, 6, 0, 0, 0, 0, 0, 0],\n    [0, 0, 1, 0, 0, 4, 0, 8, 0],\n    [4, 0, 0, 3, 0, 7, 0, 5, 0],\n    [6, 7, 3, 9, 0, 0, 0, 0, 0],\n];\n\nconst SudukoBoard = ({ puzzleGrid }) => (\n    <table className=\"sudoku\">\n        <tbody>\n            {puzzleGrid.map((row) => (\n                <tr>\n                    {row.map((cell) => (\n                        <td>\n                            <input type=\"text\" value={cell === 0 ? \"\" : cell} />\n                        </td>\n                    ))}\n                </tr>\n            ))}\n        </tbody>\n    </table>\n);\n\nfunction SudokuGame({ board }) {\n    const [puzzle, setPuzzle] = useState(board);\n    const solveObject = new Solver(puzzle);\n    function solve() {\n        solveObject.solve();\n        setPuzzle([...puzzle]);\n    }\n\n    function newPuzzle() {\n        axios\n            .get(\"https://sugoku.herokuapp.com/board?difficulty=easy\")\n            .then((response) => {\n                setPuzzle(response.data.board);\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    }\n\n    return (\n        <div className=\"game\">\n            <h1>Sudoku Solver</h1>\n            <SudukoBoard puzzleGrid={puzzle} />\n            <div className=\"buttons\">\n                <button onClick={solve}>Solve It!</button>\n                <button onClick={newPuzzle}>New Puzzle</button>\n            </div>\n        </div>\n    );\n}\n\nReactDOM.render(\n    <SudokuGame board={testPuzzle} />,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}